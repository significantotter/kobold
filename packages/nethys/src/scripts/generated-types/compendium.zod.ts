import * as z from 'zod';

export const ActionsSchema = z.enum([
	'Free Action',
	'Reaction',
	'Reaction or One Action',
	'Reaction or Two Actions',
	'Single Action',
	'Single Action or more Actions',
	'Single Action or Two Actions',
	'Single Action to Three Actions',
	'Single Action to Two Actions',
	'10 minutes',
	'1 day',
	'1 hour',
	'1 minute',
	'1 week',
	'2 days',
	'2 hours',
	'30 minutes',
	'3 days',
	'4 hours',
	'5 minutes',
	'6 days',
	'7 days',
	'9 days',
	'Three Actions',
	'Two Actions',
	'Two Actions or Three Actions',
	'Two Actions to 2 rounds',
]);
export type Actions = z.infer<typeof ActionsSchema>;

export const AlignmentSchema = z.enum([
	'Any',
	'CE',
	'CG',
	'CN',
	'LE',
	'LG',
	'LN',
	'must be chaotic evil',
	'must be good, usually neutral good',
	'must be true neutral',
	'N',
	'NE',
	'NG',
	'No Alignment',
]);
export type Alignment = z.infer<typeof AlignmentSchema>;

export const ArchetypeCategorySchema = z.enum([
	'Artifact',
	'Class',
	'Combat Style',
	'Core',
	'Faction',
	'Multiclass',
	'Mystical',
	'Profession',
	'Undead',
]);
export type ArchetypeCategory = z.infer<typeof ArchetypeCategorySchema>;

export const ArmorCategorySchema = z.enum(['Heavy', 'Light', 'Medium', 'Unarmored']);
export type ArmorCategory = z.infer<typeof ArmorCategorySchema>;

export const ArmorGroupSchema = z.enum([
	'Chain',
	'Cloth',
	'Composite',
	'Leather',
	'Plate',
	'Skeletal',
	'Wood',
]);
export type ArmorGroup = z.infer<typeof ArmorGroupSchema>;

export const AttributeSchema = z.enum([
	'other',
	'Charisma',
	'Constitution',
	'Dexterity',
	'Free',
	'Intelligence',
	'Other',
	'Strength',
	'Two free ability boosts',
	'Wisdom',
]);
export type Attribute = z.infer<typeof AttributeSchema>;

export const CategorySchema = z.enum([
	'action',
	'ancestry',
	'animal-companion',
	'animal-companion-advanced',
	'animal-companion-specialization',
	'animal-companion-unique',
	'arcane-school',
	'arcane-thesis',
	'archetype',
	'armor',
	'armor-group',
	'article',
	'background',
	'bloodline',
	'campsite-meal',
	'category-page',
	'cause',
	'class',
	'class-feature',
	'class-kit',
	'class-sample',
	'condition',
	'conscious-mind',
	'creature',
	'creature-ability',
	'creature-family',
	'creature-theme-template',
	'curse',
	'deity',
	'deity-category',
	'deviant-ability-classification',
	'disease',
	'doctrine',
	'domain',
	'druidic-order',
	'eidolon',
	'element',
	'equipment',
	'familiar-ability',
	'familiar-specific',
	'feat',
	'hazard',
	'hellknight-order',
	'heritage',
	'hunters-edge',
	'hybrid-study',
	'implement',
	'innovation',
	'instinct',
	'kingdom-event',
	'kingdom-structure',
	'language',
	'lesson',
	'methodology',
	'muse',
	'mystery',
	'patron',
	'plane',
	'racket',
	'relic',
	'research-field',
	'ritual',
	'rules',
	'set-relic',
	'shield',
	'siege-weapon',
	'skill',
	'skill-general-action',
	'source',
	'spell',
	'style',
	'subconscious-mind',
	'tenet',
	'tradition',
	'trait',
	'vehicle',
	'warfare-army',
	'warfare-tactic',
	'way',
	'weapon',
	'weapon-group',
	'weather-hazard',
]);
export type Category = z.infer<typeof CategorySchema>;

export const ClassEnumSchema = z.enum([
	'Alchemist',
	'Barbarian',
	'Bard',
	'Champion',
	'Cleric',
	'Druid',
	'Fighter',
	'Gunslinger',
	'Inventor',
	'Investigator',
	'Kineticist',
	'Magus',
	'Monk',
	'Oracle',
	'Psychic',
	'Ranger',
	'Rogue',
	'Sorcerer',
	'Summoner',
	'Swashbuckler',
	'Thaumaturge',
	'Witch',
	'Wizard',
]);
export type ClassEnum = z.infer<typeof ClassEnumSchema>;

export const ComplexitySchema = z.enum(['Complex', 'Simple']);
export type Complexity = z.infer<typeof ComplexitySchema>;

export const ComponentSchema = z.enum([
	'focus',
	'material',
	'none printed',
	'somatic',
	'somatic or verbal',
	'10 minutes',
	'1 hour',
	'1 minute',
	'verbal',
]);
export type Component = z.infer<typeof ComponentSchema>;

export const DefenseProficiencySchema = z.enum([
	'Expert in unarmored defense',
	'Trained in all armor',
	'Trained in light armor',
	'Trained in medium armor',
	'Trained in unarmored defense',
	'Untrained in all armor',
	'Untrained in all armor, though your doctrine might alter this',
]);
export type DefenseProficiency = z.infer<typeof DefenseProficiencySchema>;

export const DivineFontSchema = z.enum(['Harm', 'Heal']);
export type DivineFont = z.infer<typeof DivineFontSchema>;

export const DivineFontMarkdownSchema = z.enum([
	'',
	'[Harm](/Spells.aspx?ID=146)',
	'[Harm](/Spells.aspx?ID=146) or [Heal](/Spells.aspx?ID=148)',
	'[Heal](/Spells.aspx?ID=148)',
]);
export type DivineFontMarkdown = z.infer<typeof DivineFontMarkdownSchema>;

export const ElementSchema = z.enum([
	'Air',
	'Earth',
	'Fire',
	'Metal',
	'Universal',
	'Water',
	'Wood',
]);
export type Element = z.infer<typeof ElementSchema>;

export const ProficiencySchema = z.enum(['Expert', 'Trained']);
export type Proficiency = z.infer<typeof ProficiencySchema>;

export const HazardTypeSchema = z.enum(['Environmental', 'Haunt', 'Trap', 'Weather']);
export type HazardType = z.infer<typeof HazardTypeSchema>;

export const HeightenSchema = z.enum([
	'+1',
	'10th',
	'12th',
	'13th',
	'14th',
	'16th',
	'+2',
	'20th',
	'2nd',
	'+3',
	'3rd',
	'+4',
	'4th',
	'+5',
	'5th',
	'+6',
	'6th',
	'7th',
	'8th',
	'9th',
]);
export type Heighten = z.infer<typeof HeightenSchema>;

export const HeightenGroupSchema = z.enum([
	'Heightened 10th level',
	'Heightened 10th rank',
	'Heightened 11th level',
	'Heightened 12th level',
	'Heightened 13th level',
	'Heightened 14th level',
	'Heightened 15th level',
	'Heightened 16th level',
	'Heightened 17th level',
	'Heightened 18th level',
	'Heightened 19th level',
	'Heightened 20th level',
	'Heightened 2nd rank',
	'Heightened 3rd level',
	'Heightened 3rd rank',
	'Heightened 4th level',
	'Heightened 4th rank',
	'Heightened 5th level',
	'Heightened 5th rank',
	'Heightened 6th level',
	'Heightened 6th rank',
	'Heightened 7th level',
	'Heightened 7th rank',
	'Heightened 8th level',
	'Heightened 8th rank',
	'Heightened 9th level',
	'Heightened 9th rank',
	'10th rank',
	'12th level',
	'14th level',
	'18th level',
	'1st level',
	'1st rank',
	'2nd rank',
	'3rd rank',
	'4th level',
	'4th rank',
	'5th rank',
	'6th level',
	'6th rank',
	'7th rank',
	'8th level',
	'8th rank',
	'9th rank',
]);
export type HeightenGroup = z.infer<typeof HeightenGroupSchema>;

export const ItemCategorySchema = z.enum([
	'Adjustments',
	'Adventuring Gear',
	'Alchemical Items',
	'Animals and Gear',
	'Armor',
	'Artifacts',
	'Assistive Items',
	'Blighted Boons',
	'Censer',
	'Consumables',
	'Contracts',
	'Cursed Items',
	'Customizations',
	'Figurehead',
	'Grimoires',
	'Held Items',
	'High-Tech',
	'Intelligent Items',
	'Materials',
	'Other',
	'Relics',
	'Runes',
	'Services',
	'Shields',
	'Siege Weapons',
	'Snares',
	'Spellhearts',
	'Staves',
	'Structures',
	'Tattoos',
	'Trade Goods',
	'Vehicles',
	'Wands',
	'Weapons',
	'Worn Items',
]);
export type ItemCategory = z.infer<typeof ItemCategorySchema>;

export const LessonTypeSchema = z.enum(['Basic', 'Greater', 'Major']);
export type LessonType = z.infer<typeof LessonTypeSchema>;

export const PfsSchema = z.enum(['Limited', 'Restricted', 'Standard']);
export type Pfs = z.infer<typeof PfsSchema>;

export const PlaneCategorySchema = z.enum([
	'Dimensions',
	'Inner Sphere Planes',
	'Outer Sphere Planes',
	'Transitive Planes',
]);
export type PlaneCategory = z.infer<typeof PlaneCategorySchema>;

export const RaritySchema = z.enum(['common', 'rare', 'uncommon', 'unique']);
export type Rarity = z.infer<typeof RaritySchema>;

export const SanctificationSchema = z.enum(['holy', 'unholy']);
export type Sanctification = z.infer<typeof SanctificationSchema>;

export const SanctificationRawSchema = z.enum([
	'can choose holy',
	'can choose holy or unholy',
	'can choose unholy',
	'must choose holy',
	'must choose unholy',
	'none',
]);
export type SanctificationRaw = z.infer<typeof SanctificationRawSchema>;

export const SchoolSchema = z.enum([
	'abjuration',
	'conjuration',
	'divination',
	'enchantment',
	'evocation',
	'illusion',
	'necromancy',
	'transmutation',
]);
export type School = z.infer<typeof SchoolSchema>;

export const SizeSchema = z.enum(['Gargantuan', 'Huge', 'Large', 'Medium', 'Small', 'Tiny']);
export type Size = z.infer<typeof SizeSchema>;

export const SourceCategorySchema = z.enum([
	'Adventure Paths',
	'Adventures',
	'Blog Posts',
	'Comics',
	'Lost Omens',
	'Rulebooks',
	'Society',
]);
export type SourceCategory = z.infer<typeof SourceCategorySchema>;

export const SourceGroupSchema = z.enum([
	'Abomination Vaults',
	'Age of Ashes',
	'Agents of Edgewatch',
	'Blood Lords',
	'Book of the Dead',
	'Crown of the Kobold King',
	'Dark Archive',
	'Extinction Curse',
	'Fists of the Ruby Phoenix',
	'Gatewalkers',
	'Kingmaker',
	'Little Trouble in Big Absalom',
	'Malevolence',
	'Night of the Gray Death',
	'Outlaws of Alkenstar',
	'Pathfinder Society',
	'Quest for the Frozen Flame',
	'Rusthenge',
	'Season of Ghosts',
	'Shadows at Sundown',
	"Sky King's Tomb",
	'Stolen Fate',
	'Strength of Thousands',
	'The Enmity Cycle',
	'The Fall of Plaguestone',
	'The Slithering',
	'Threshold of Knowledge',
	'Troubles in Otari',
]);
export type SourceGroup = z.infer<typeof SourceGroupSchema>;

export const SpeedPenaltySchema = z.enum(['-10 ft.', '-5 ft.']);
export type SpeedPenalty = z.infer<typeof SpeedPenaltySchema>;

export const SpellTypeSchema = z.enum(['Cantrip', 'Focus', 'Spell']);
export type SpellType = z.infer<typeof SpellTypeSchema>;

export const EstSaveSchema = z.enum(['fort', 'fortitude', 'ref', 'reflex', 'will']);
export type EstSave = z.infer<typeof EstSaveSchema>;

export const TraditionSchema = z.enum(['Arcane', 'Divine', 'Elemental', 'Occult', 'Primal']);
export type Tradition = z.infer<typeof TraditionSchema>;

export const TraitGroupSchema = z.enum([
	'Alignment',
	'Ancestry',
	'AoN-Special',
	'AP-Specific',
	'Armor',
	'Class',
	'Class-Specific',
	'Creature Type',
	'Elemental',
	'Energy',
	'Equipment',
	'Half-Elf',
	'Half-Orc',
	'Hazard',
	'Kingdom',
	'Kingdomâ€”Event',
	'Kingdomâ€”Settlement',
	'Kingdomâ€”Warfare',
	'Monster',
	'Planar',
	'Poison',
	'Rarity',
	'School',
	'Sense',
	'Settlement',
	'Shield',
	'Tradition',
	'Variant Rules',
	'Weapon',
]);
export type TraitGroup = z.infer<typeof TraitGroupSchema>;

export const TypeSchema = z.enum([
	'Action',
	'Alchemist Research Field',
	'Ancestry',
	'Animal Companion',
	'Animal Companion Advanced Option',
	'Animal Companion Specialization',
	'Archetype',
	'Armor Specialization',
	'Background',
	'Barbarian Instinct',
	'Bard Muse',
	'Campsite Meal',
	'Category Page',
	'Champion Cause',
	'Champion Tenet',
	'Class',
	'Class Feature',
	'Class Kit',
	'Class Sample Build',
	'Cleric Doctrine',
	'Condition',
	'Creature',
	'Creature Ability',
	'Creature Family',
	'Creature Theme Template',
	'Curse',
	'Deity',
	'Deity Category',
	'Deviant Ability Classification',
	'Disease',
	'Domain',
	'Druidic Order',
	'Familiar Ability',
	'Feat',
	'General Skill Action',
	'Gunslinger Way',
	'Half-Human Heritage',
	'Hazard',
	'Hellknight Order',
	'Heritage',
	'Inventor Innovation',
	'Investigator Methodology',
	'Item',
	'Kineticist Element',
	'Kingdom Event',
	'Kingdom Structure',
	'Language',
	'Magus Hybrid Study',
	'Oracle Mystery',
	'Plane',
	'Psychic Conscious Mind',
	'Psychic Subconscious Mind',
	"Ranger Hunter's Edge",
	'Relic Grand Gift',
	'Relic Major Gift',
	'Relic Minor Gift',
	'Ritual',
	'Rogue Racket',
	'Rules',
	'Set Relic',
	'Setting Article',
	'Siege Weapon',
	'Skill',
	'Sorcerer Bloodline',
	'Source',
	'Specific Familiar',
	'Spell',
	'Spell List',
	'Summoner Eidolon',
	'Swashbuckler Style',
	'Thaumaturge Implement',
	'Tradition',
	'Trait',
	'Unique Animal Companion',
	'Vehicle',
	'Versatile Heritage',
	'Warfare Army',
	'Warfare Tactic',
	'Weapon Critical Specialization',
	'Weather Hazard',
	'Witch Lesson',
	'Witch Patron Theme',
	'Wizard Arcane School',
	'Wizard Arcane Thesis',
]);
export type Type = z.infer<typeof TypeSchema>;

export const VisionSchema = z.enum([
	'Darkvision',
	'Greater darkvision',
	'Low-light vision',
	'Low-Light Vision',
]);
export type Vision = z.infer<typeof VisionSchema>;

export const WeaponCategorySchema = z.enum([
	'Advanced',
	'Ammunition',
	'Martial',
	'Simple',
	'Unarmed',
]);
export type WeaponCategory = z.infer<typeof WeaponCategorySchema>;

export const WeaponGroupSchema = z.enum([
	'Axe',
	'Bomb',
	'Bow',
	'Brawling',
	'Club',
	'Crossbow',
	'Dart',
	'Firearm',
	'Flail',
	'Hammer',
	'Knife',
	'Pick',
	'Polearm',
	'Shield',
	'Sling',
	'Spear',
	'Sword',
]);
export type WeaponGroup = z.infer<typeof WeaponGroupSchema>;

export const WeaponGroupMarkdownSchema = z.enum([
	'[Axe](/WeaponGroups.aspx?ID=1)',
	'[Bomb](/WeaponGroups.aspx?ID=2)',
	'[Bow](/WeaponGroups.aspx?ID=3)',
	'[Brawling](/WeaponGroups.aspx?ID=4)',
	'[Club](/WeaponGroups.aspx?ID=5)',
	'[Crossbow](/WeaponGroups.aspx?ID=17)',
	'[Dart](/WeaponGroups.aspx?ID=6)',
	'[Firearm](/WeaponGroups.aspx?ID=16)',
	'[Flail](/WeaponGroups.aspx?ID=7)',
	'[Hammer](/WeaponGroups.aspx?ID=8)',
	'[Knife](/WeaponGroups.aspx?ID=9)',
	'[Pick](/WeaponGroups.aspx?ID=10)',
	'[Polearm](/WeaponGroups.aspx?ID=11)',
	'[Shield](/WeaponGroups.aspx?ID=12)',
	'[Sling](/WeaponGroups.aspx?ID=13)',
	'[Spear](/WeaponGroups.aspx?ID=14)',
	'[Sword](/WeaponGroups.aspx?ID=15)',
]);
export type WeaponGroupMarkdown = z.infer<typeof WeaponGroupMarkdownSchema>;

export const WeaponTypeSchema = z.enum(['Melee', 'Ranged']);
export type WeaponType = z.infer<typeof WeaponTypeSchema>;

export const NextLinkSchema = z.object({
	label: z.string(),
	url: z.string(),
});
export type NextLink = z.infer<typeof NextLinkSchema>;

export const SpeedSchema = z.object({
	land: z.number().optional(),
	max: z.number().optional(),
	swim: z.number().optional(),
	burrow: z.number().optional(),
	climb: z.number().optional(),
	fly: z.number().optional(),
});
export type Speed = z.infer<typeof SpeedSchema>;

export const CompendiumEntry = z.object({
	ac: z.number().optional(),
	alignment: AlignmentSchema.optional(),
	category: CategorySchema,
	charisma: z.number().optional(),
	constitution: z.number().optional(),
	creature_ability: z.array(z.string()).optional(),
	creature_family_markdown: z.string().optional(),
	dexterity: z.number().optional(),
	exclude_from_search: z.boolean(),
	fortitude_save: z.number().optional(),
	hp: z.number().optional(),
	hp_raw: z.string().optional(),
	id: z.string(),
	intelligence: z.number().optional(),
	language: z.array(z.string()).optional(),
	language_markdown: z.string().optional(),
	level: z.number().optional(),
	markdown: z.string(),
	name: z.string(),
	npc: z.boolean().optional(),
	perception: z.number().optional(),
	rarity: RaritySchema,
	rarity_id: z.number(),
	reflex_save: z.number().optional(),
	release_date: z.string(),
	resistance: z.record(z.string(), z.number()),
	search_markdown: z.string(),
	sense: z.string().optional(),
	sense_markdown: z.string().optional(),
	size: z.array(SizeSchema).optional(),
	size_id: z.array(z.number()).optional(),
	skill: z.array(z.string()).optional(),
	skill_markdown: z.string().optional(),
	skill_mod: z.record(z.string(), z.number()),
	source: z.array(z.string()),
	source_raw: z.array(z.string()),
	source_category: SourceCategorySchema,
	source_group: SourceGroupSchema.optional(),
	source_markdown: z.string().optional(),
	speed: SpeedSchema,
	speed_markdown: z.string().optional(),
	speed_raw: z.string().optional(),
	spell: z.array(z.string()).optional(),
	spell_markdown: z.string().optional(),
	spoilers: SourceGroupSchema.optional(),
	strength: z.number().optional(),
	strongest_save: z.array(EstSaveSchema).optional(),
	text: z.string(),
	trait: z.array(z.string()).optional(),
	trait_group: z.array(TraitGroupSchema).optional(),
	trait_markdown: z.string().optional(),
	trait_raw: z.array(z.string()).optional(),
	type: TypeSchema,
	url: z.string(),
	vision: VisionSchema.optional(),
	weakest_save: z.array(EstSaveSchema).optional(),
	weakness: z.record(z.string(), z.number()),
	will_save: z.number().optional(),
	wisdom: z.number().optional(),
	resistance_markdown: z.string().optional(),
	resistance_raw: z.string().optional(),
	stealth: z.string().optional(),
	image: z.array(z.string()).optional(),
	immunity: z.array(z.string()).optional(),
	immunity_markdown: z.string().optional(),
	summary: z.string().optional(),
	summary_markdown: z.string().optional(),
	weakness_markdown: z.string().optional(),
	weakness_raw: z.string().optional(),
	creature_family: z.string().optional(),
	element: z.array(ElementSchema).optional(),
	next_link: NextLinkSchema.optional(),
	previous_link: NextLinkSchema.optional(),
	hardness: z.number().optional(),
	hardness_raw: z.string().optional(),
	school: SchoolSchema.optional(),
	pfs: PfsSchema.optional(),
	breadcrumbs: z.array(z.string()).optional(),
	legacy_id: z.string().optional(),
	actions: ActionsSchema.optional(),
	actions_number: z.number().optional(),
	cost: z.string().optional(),
	cost_markdown: z.string().optional(),
	heighten_group: z.array(HeightenGroupSchema).optional(),
	heighten_level: z.array(z.number()).optional(),
	primary_check: z.string().optional(),
	primary_check_markdown: z.string().optional(),
	range: z.number().optional(),
	range_raw: z.string().optional(),
	secondary_casters: z.number().optional(),
	secondary_casters_raw: z.string().optional(),
	secondary_check: z.string().optional(),
	secondary_check_markdown: z.string().optional(),
	target: z.string().optional(),
	target_markdown: z.string().optional(),
	duration: z.number().optional(),
	duration_raw: z.string().optional(),
	heighten: z.array(HeightenSchema).optional(),
	area: z.string().optional(),
	feat: z.array(z.string()).optional(),
	feat_markdown: z.string().optional(),
	archetype: z.array(z.string()).optional(),
	prerequisite: z.string().optional(),
	prerequisite_markdown: z.string().optional(),
	trigger: z.string().optional(),
	trigger_markdown: z.string().optional(),
	remaster_id: z.string().optional(),
	frequency: z.string().optional(),
	usage: z.string().optional(),
	usage_markdown: z.string().optional(),
	saving_throw: z.string().optional(),
	saving_throw_markdown: z.string().optional(),
	attribute: z.array(AttributeSchema).optional(),
	anathema: z.string().optional(),
	cleric_spell: z.array(z.string()).optional(),
	deity: z.array(z.string()).optional(),
	deity_markdown: z.string().optional(),
	deity_category: z.string().optional(),
	deity_category_markdown: z.string().optional(),
	deity_category_order: z.string().optional(),
	divine_font: z.array(DivineFontSchema).optional(),
	divine_font_markdown: DivineFontMarkdownSchema.optional(),
	domain: z.array(z.string()).optional(),
	domain_markdown: z.string().optional(),
	domain_alternate: z.array(z.string()).optional(),
	domain_alternate_markdown: z.string().optional(),
	domain_primary: z.array(z.string()).optional(),
	domain_primary_markdown: z.string().optional(),
	edict: z.string().optional(),
	favored_weapon: z.array(z.string()).optional(),
	favored_weapon_markdown: z.string().optional(),
	follower_alignment: z.array(AlignmentSchema).optional(),
	icon_image: z.string().optional(),
	pantheon: z.array(z.string()).optional(),
	pantheon_markdown: z.string().optional(),
	sanctification: z.array(SanctificationSchema).optional(),
	sanctification_raw: SanctificationRawSchema.optional(),
	pantheon_member: z.array(z.string()).optional(),
	pantheon_member_markdown: z.string().optional(),
	onset: z.number().optional(),
	onset_raw: z.string().optional(),
	stage: z.array(z.string()).optional(),
	stage_markdown: z.string().optional(),
	advanced_domain_spell: z.string().optional(),
	advanced_domain_spell_markdown: z.string().optional(),
	apocryphal_spell: z.string().optional(),
	apocryphal_spell_markdown: z.string().optional(),
	domain_spell: z.string().optional(),
	domain_spell_markdown: z.string().optional(),
	advanced_apocryphal_spell: z.string().optional(),
	advanced_apocryphal_spell_markdown: z.string().optional(),
	remaster_name: z.string().optional(),
	legacy_name: z.string().optional(),
	home_plane: z.string().optional(),
	tradition: z.array(TraditionSchema).optional(),
	tradition_markdown: z.string().optional(),
	base_item_markdown: z.string().optional(),
	bulk: z.number().optional(),
	bulk_raw: z.string().optional(),
	item_category: ItemCategorySchema.optional(),
	price: z.number().optional(),
	price_raw: z.string().optional(),
	hands: z.string().optional(),
	access: z.string().optional(),
	item_subcategory: z.string().optional(),
	requirement: z.string().optional(),
	requirement_markdown: z.string().optional(),
	base_item: z.array(z.string()).optional(),
	ammunition: z.string().optional(),
	ammunition_markdown: z.string().optional(),
	access_markdown: z.string().optional(),
	class: ClassEnumSchema.optional(),
	ability_type: z.string().optional(),
	familiar_ability: z.array(z.string()).optional(),
	familiar_ability_markdown: z.string().optional(),
	required_abilities: z.number().optional(),
	attribute_flaw: z.array(AttributeSchema).optional(),
	navigation: z.array(NextLinkSchema).optional(),
	archetype_category: z.array(ArchetypeCategorySchema).optional(),
	armor_group: ArmorGroupSchema.optional(),
	armor_group_markdown: z.string().optional(),
	armor_category: ArmorCategorySchema.optional(),
	dex_cap: z.number().optional(),
	check_penalty: z.number().optional(),
	speed_penalty: SpeedPenaltySchema.optional(),
	is_general_background: z.boolean().optional(),
	region: z.string().optional(),
	bloodline: z.array(z.string()).optional(),
	bloodline_markdown: z.string().optional(),
	attack_proficiency: z.array(z.string()).optional(),
	defense_proficiency: z.array(DefenseProficiencySchema).optional(),
	fortitude_proficiency: ProficiencySchema.optional(),
	perception_proficiency: ProficiencySchema.optional(),
	reflex_proficiency: ProficiencySchema.optional(),
	skill_proficiency: z.array(z.string()).optional(),
	will_proficiency: ProficiencySchema.optional(),
	complexity: ComplexitySchema.optional(),
	disable: z.string().optional(),
	hazard_type: HazardTypeSchema.optional(),
	reset: z.string().optional(),
	lesson_type: LessonTypeSchema.optional(),
	plane_category: PlaneCategorySchema.optional(),
	hex_cantrip: z.string().optional(),
	aspect: z.array(z.string()).optional(),
	aspect_markdown: z.string().optional(),
	component: z.array(ComponentSchema).optional(),
	spell_type: SpellTypeSchema.optional(),
	patron_theme: z.array(z.string()).optional(),
	patron_theme_markdown: z.string().optional(),
	mystery: z.array(z.string()).optional(),
	mystery_markdown: z.string().optional(),
	lesson: z.array(z.string()).optional(),
	lesson_markdown: z.string().optional(),
	damage: z.string().optional(),
	damage_die: z.number().optional(),
	weapon_category: WeaponCategorySchema.optional(),
	weapon_group: WeaponGroupSchema.optional(),
	weapon_group_markdown: WeaponGroupMarkdownSchema.optional(),
	weapon_type: WeaponTypeSchema.optional(),
	reload: z.number().optional(),
	reload_raw: z.string().optional(),
});
export type Compendium = z.infer<typeof CompendiumEntry>;
