/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * An imported character
 */
export interface Character {
	/**
	 * The id of the character record.
	 */
	id?: number;
	/**
	 * The name of the character.
	 */
	name?: string;
	/**
	 * The external wanderer's guide character id.
	 */
	charId?: number;
	/**
	 * The discord id of the user who imported the character
	 */
	userId?: string;
	/**
	 * The discord id of message set to track this character's stats.
	 */
	trackerMessageId?: string | null;
	/**
	 * The discord id of the channel containing the message set to track this character's stats.
	 */
	trackerChannelId?: string | null;
	/**
	 * The discord id of the guild with the channel set to track this character's stats.
	 */
	trackerGuildId?: string | null;
	/**
	 * The mode of the tracker message. Either counters_only', 'basic_stats', or 'full_sheet.
	 */
	trackerMode?: "counters_only" | "basic_stats" | "full_sheet";
	/**
	 * An array of roll macro objects that allow the substituting of saved roll expressions for simple keywords.
	 */
	rollMacros?: {
		name?: string;
		macro?: string;
		[k: string]: any;
	}[];
	/**
	 * An array of attribute objects that can be used to apply character values to dice expressions. These attributes are set internally and uneditable.
	 */
	attributes?: {
		name?: string;
		type?: string;
		value?: number;
		tags?: string[];
		[k: string]: any;
	}[];
	/**
	 * An array of toggleable modifier objects that apply dice expression values to rolls with certain tags.
	 */
	modifiers?: {
		name?: string;
		isActive?: boolean;
		description?: string | null;
		type?: string;
		targetTags?: string;
		value?: number | string;
		[k: string]: any;
	}[];
	/**
	 * An array of default actions set up for the user. These allow the user to make certain roll operations as a single command.
	 */
	actions?: {
		name?: string;
		description?: string;
		type?: string;
		actionCost?: string | null;
		baseLevel?: number | null;
		autoHeighten?: boolean;
		tags?: string[];
		rolls?: (
			| {
					name?: string;
					type?: "attack" | "skill-challenge";
					targetDC?: string | null;
					roll?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "damage";
					damageType?: string | null;
					healInsteadOfDamage?: boolean | null;
					roll?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "advanced-damage";
					damageType?: string | null;
					healInsteadOfDamage?: boolean | null;
					criticalSuccessRoll?: string | null;
					criticalFailureRoll?: string | null;
					successRoll?: string | null;
					failureRoll?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "save";
					saveRollType?: string | null;
					saveTargetDC?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "text";
					defaultText?: string | null;
					criticalSuccessText?: string | null;
					criticalFailureText?: string | null;
					successText?: string | null;
					failureText?: string | null;
					allowRollModifiers?: boolean;
					extraTags?: string[];
					[k: string]: any;
			  }
		)[];
		[k: string]: any;
	}[];
	/**
	 * The general character data from the PathBuilder json export
	 */
	pathBuilderData?: null | {
		[k: string]: any;
	};
	/**
	 * The general character data from the Wanderer's guide API /character endpoint
	 */
	characterData?: {
		id?: number;
		userID?: number;
		buildID?: null | number;
		name?: string;
		level?: number;
		experience?: number;
		currentHealth?: null | number;
		tempHealth?: null | number;
		heroPoints?: null | number;
		ancestryID?: null | number;
		heritageID?: null | number;
		uniHeritageID?: null | number;
		backgroundID?: null | number;
		classID?: null | number;
		classID_2?: null | number;
		inventoryID?: number;
		notes?: any;
		rollHistoryJSON?: any;
		details?: any;
		customCode?: any;
		infoJSON?: null | {
			imageURL?: string;
			pronouns?: any;
			[k: string]: any;
		};
		dataID?: null | number;
		currentStamina?: null | number;
		currentResolve?: null | number;
		builderByLevel?: number;
		optionAutoDetectPreReqs?: number;
		optionAutoHeightenSpells?: number;
		optionPublicCharacter?: number;
		optionCustomCodeBlock?: number;
		optionDiceRoller?: number;
		optionClassArchetypes?: number;
		optionIgnoreBulk?: number;
		variantProfWithoutLevel?: number;
		variantFreeArchetype?: number;
		variantAncestryParagon?: number;
		variantStamina?: number;
		variantAutoBonusProgression?: number;
		variantGradualAbilityBoosts?: number;
		enabledSources?: any;
		enabledHomebrew?: any;
		createdAt?: string;
		updatedAt?: string;
		[k: string]: any;
	};
	/**
	 * The computed base stat block from the Wanderer's guide API /character/calculated-stats endpoint
	 */
	calculatedStats?: {
		charID?: number;
		maxHP?: number | null;
		totalClassDC?: number | null;
		totalSpeed?: number | null;
		totalAC?: number | null;
		totalPerception?: number | null;
		totalSkills?: {
			Name?: string;
			Bonus?: string | number | null;
			[k: string]: any;
		}[];
		totalSaves?: {
			Name?: string;
			Bonus?: string | number | null;
			[k: string]: any;
		}[];
		totalAbilityScores?: {
			Name?: string;
			Score?: number | null;
			[k: string]: any;
		}[];
		weapons?: {
			Name?: string;
			Bonus?: string | number | null;
			Damage?: string | number | null;
			[k: string]: any;
		}[];
		createdAt?: string;
		updatedAt?: string;
		[k: string]: any;
	};
	/**
	 * Whether this is the active character for the user's character based commands
	 */
	isActiveCharacter?: boolean;
	/**
	 * What source website this character was imported from.
	 */
	importSource?: string;
	/**
	 * When the character was first imported
	 */
	createdAt?: string;
	/**
	 * When the character was last updated
	 */
	lastUpdatedAt?: string;
	[k: string]: any;
}
