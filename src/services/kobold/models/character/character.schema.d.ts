/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * An imported character
 */
export interface Character {
	/**
	 * The id of the character record.
	 */
	id?: number;
	/**
	 * The external wanderer's guide character id.
	 */
	charId?: number;
	/**
	 * The discord id of the user who imported the character
	 */
	userId?: string;
	/**
	 * The character's statistics.
	 */
	sheet?: {
		/**
		 * The general character sheet formation.
		 */
		info?: {
			/**
			 * The character's name.
			 */
			name?: string;
			/**
			 * The character's portrait image URL.
			 */
			imageURL?: string;
			/**
			 * The character's level.
			 */
			level?: number;
			/**
			 * The character's class.
			 */
			class?: string;
			/**
			 * The character's ancestry.
			 */
			ancestry?: string;
			/**
			 * The character's heritage.
			 */
			heritage?: string;
			/**
			 * The character's spoken languages.
			 */
			languages?: string[];
			[k: string]: any;
		};
		/**
		 * The character sheet information related to health.
		 */
		health?: {
			/**
			 * The character's current hit points.
			 */
			currentHp?: number;
			/**
			 * The character's maximum hit points.
			 */
			maxHp?: number;
			/**
			 * The character's temporary hit points.
			 */
			tempHp?: number;
			/**
			 * The character's current resolve points.
			 */
			currentResolve?: number;
			/**
			 * The character's maximum resolve points.
			 */
			maxResolve?: number;
			/**
			 * The character's current stamina points.
			 */
			currentStamina?: number;
			/**
			 * The character's maximum stamina points.
			 */
			maxStamina?: number;
			[k: string]: any;
		};
		/**
		 * The general attributes for the character.
		 */
		attributes?: {
			/**
			 * The character's current hero points.
			 */
			currentHeroPoints?: number;
			/**
			 * The character's speed.
			 */
			speed?: number;
			/**
			 * The character's speed bonus.
			 */
			speedBonus?: number;
			/**
			 * The character's current focus points.
			 */
			currentFocusPoints?: number;
			/**
			 * The character's maximum focus points.
			 */
			focusPoints?: number;
			/**
			 * The character's class DC.
			 */
			classDC?: number;
			/**
			 * The character's perception.
			 */
			perception?: number;
			/**
			 * The character's perception proficiency modifier.
			 */
			perceptionProfMod?: number;
			[k: string]: any;
		};
		/**
		 * The character's defensive attributes.
		 */
		defenses?: {
			/**
			 * The character's armor class
			 */
			ac?: number;
			/**
			 * The character's heavy armor proficiency modifier.
			 */
			heavyProfMod?: number;
			/**
			 * The character's medium armor proficiency modifier.
			 */
			mediumProfMod?: number;
			/**
			 * The character's light armor proficiency modifier.
			 */
			lightProfMod?: number;
			/**
			 * The character's unarmored proficiency modifier.
			 */
			unarmoredProfMod?: number;
			[k: string]: any;
		};
		/**
		 * The character's offensive attributes.
		 */
		offense?: {
			/**
			 * The character's martial weapon proficiency modifier.
			 */
			martialProfMod?: number;
			/**
			 * The character's simple weapon proficiency modifier.
			 */
			simpleProfMod?: number;
			/**
			 * The character's unarmed weapon proficiency modifier.
			 */
			unarmedProfMod?: number;
			/**
			 * The character's advanced weapon proficiency modifier.
			 */
			advancedProfMod?: number;
			[k: string]: any;
		};
		/**
		 * The character's casting stats.
		 */
		castingStats?: {
			/**
			 * The character's arcane casting stat.
			 */
			castingArcane?: number;
			/**
			 * The character's arcane casting proficiency modifier.
			 */
			castingArcaneProfMod?: number;
			/**
			 * The character's divine casting stat.
			 */
			castingDivine?: number;
			/**
			 * The character's divine casting proficiency modifier.
			 */
			castingDivineProfMod?: number;
			/**
			 * The character's occult casting stat.
			 */
			castingOccult?: number;
			/**
			 * The character's occult casting proficiency modifier.
			 */
			castingOccultProfMod?: number;
			/**
			 * The character's primal casting stat.
			 */
			castingPrimal?: number;
			/**
			 * The character's primal casting proficiency modifier.
			 */
			castingPrimalProfMod?: number;
			[k: string]: any;
		};
		/**
		 * The character's saving throw attributes.
		 */
		saves?: {
			/**
			 * The character's fortitude save.
			 */
			fortitude?: number;
			/**
			 * The character's fortitude proficiency modifier.
			 */
			fortitudeProfMod?: number;
			/**
			 * The character's reflex save.
			 */
			reflex?: number;
			/**
			 * The character's reflex proficiency modifier.
			 */
			reflexProfMod?: number;
			/**
			 * The character's will save.
			 */
			will?: number;
			/**
			 * The character's will proficiency modifier.
			 */
			willProfMod?: number;
			[k: string]: any;
		};
		/**
		 * The character's skill attributes.
		 */
		skills?: {
			/**
			 * The character's acrobatics skill.
			 */
			acrobatics?: number;
			/**
			 * The character's acrobatics proficiency modifier.
			 */
			acrobaticsProfMod?: number;
			/**
			 * The character's arcana skill.
			 */
			arcana?: number;
			/**
			 * The character's arcana proficiency modifier.
			 */
			arcanaProfMod?: number;
			/**
			 * The character's athletics skill.
			 */
			athletics?: number;
			/**
			 * The character's athletics proficiency modifier.
			 */
			athleticsProfMod?: number;
			/**
			 * The character's crafting skill.
			 */
			crafting?: number;
			/**
			 * The character's crafting proficiency modifier.
			 */
			craftingProfMod?: number;
			/**
			 * The character's deception skill.
			 */
			deception?: number;
			/**
			 * The character's deception proficiency modifier.
			 */
			deceptionProfMod?: number;
			/**
			 * The character's diplomacy skill.
			 */
			diplomacy?: number;
			/**
			 * The character's diplomacy proficiency modifier.
			 */
			diplomacyProfMod?: number;
			/**
			 * The character's intimidation skill.
			 */
			intimidation?: number;
			/**
			 * The character's intimidation proficiency modifier.
			 */
			intimidationProfMod?: number;
			/**
			 * The character's medicine skill.
			 */
			medicine?: number;
			/**
			 * The character's medicine proficiency modifier.
			 */
			medicineProfMod?: number;
			/**
			 * The character's nature skill.
			 */
			nature?: number;
			/**
			 * The character's nature proficiency modifier.
			 */
			natureProfMod?: number;
			/**
			 * The character's occultism skill.
			 */
			occultism?: number;
			/**
			 * The character's occultism proficiency modifier.
			 */
			occultismProfMod?: number;
			/**
			 * The character's performance skill.
			 */
			performance?: number;
			/**
			 * The character's performance proficiency modifier.
			 */
			performanceProfMod?: number;
			/**
			 * The character's religion skill.
			 */
			religion?: number;
			/**
			 * The character's religion proficiency modifier.
			 */
			religionProfMod?: number;
			/**
			 * The character's society skill.
			 */
			society?: number;
			/**
			 * The character's society proficiency modifier.
			 */
			societyProfMod?: number;
			/**
			 * The character's stealth skill.
			 */
			stealth?: number;
			/**
			 * The character's stealth proficiency modifier.
			 */
			stealthProfMod?: number;
			/**
			 * The character's survival skill.
			 */
			survival?: number;
			/**
			 * The character's survival proficiency modifier.
			 */
			survivalProfMod?: number;
			/**
			 * The character's thievery skill.
			 */
			thievery?: number;
			/**
			 * The character's thievery proficiency modifier.
			 */
			thieveryProfMod?: number;
			/**
			 * The character's lore skills.
			 */
			lores?: {
				/**
				 * The lore name.
				 */
				name?: string;
				/**
				 * The lore bonus.
				 */
				bonus?: number;
				/**
				 * The lore proficiencyModifer.
				 */
				profMod?: number;
				[k: string]: any;
			}[];
			[k: string]: any;
		};
		/**
		 * The character's attacks.
		 */
		attacks?: {
			/**
			 * The attack name.
			 */
			name?: string;
			/**
			 * The attack toHit.
			 */
			toHit?: number;
			/**
			 * The attack damage.
			 */
			damage?: string;
			/**
			 * The attack damageType.
			 */
			damageType?: string;
			/**
			 * The attack range.
			 */
			range?: string;
			/**
			 * The attack notes.
			 */
			notes?: string;
			[k: string]: any;
		}[];
		[k: string]: any;
	};
	/**
	 * An array of roll macro objects that allow the substituting of saved roll expressions for simple keywords.
	 */
	rollMacros?: {
		name?: string;
		macro?: string;
		[k: string]: any;
	}[];
	/**
	 * An array of attribute objects that can be used to apply character values to dice expressions. These attributes are set internally and uneditable.
	 */
	attributes?: {
		name?: string;
		type?: string;
		value?: number;
		tags?: string[];
		[k: string]: any;
	}[];
	/**
	 * An array of attribute objects that can be used to apply character values to dice expressions. These attributes are set by the user.
	 */
	customAttributes?: {
		name?: string;
		type?: string;
		value?: number;
		tags?: string[];
		[k: string]: any;
	}[];
	/**
	 * An array of toggleable modifier objects that apply dice expression values to rolls with certain tags.
	 */
	modifiers?: {
		name?: string;
		isActive?: boolean;
		description?: string | null;
		type?: string;
		targetTags?: string;
		value?: number | string;
		[k: string]: any;
	}[];
	/**
	 * An array of default actions set up for the user. These allow the user to make certain roll operations as a single command.
	 */
	actions?: {
		name?: string;
		description?: string;
		type?: string;
		actionCost?: string | null;
		baseLevel?: number | null;
		autoHeighten?: boolean;
		tags?: string[];
		rolls?: (
			| {
					name?: string;
					type?: "attack";
					targetDC?: string | null;
					roll?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "damage";
					roll?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "advanced-damage";
					criticalSuccessRoll?: string | null;
					criticalFailureRoll?: string | null;
					successRoll?: string | null;
					failureRoll?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "save";
					saveRollType?: string | null;
					saveTargetDC?: string | null;
					allowRollModifiers?: boolean;
					[k: string]: any;
			  }
			| {
					name?: string;
					type?: "text";
					defaultText?: string | null;
					criticalSuccessText?: string | null;
					criticalFailureText?: string | null;
					successText?: string | null;
					failureText?: string | null;
					allowRollModifiers?: boolean;
					extraTags?: string[];
					[k: string]: any;
			  }
		)[];
		[k: string]: any;
	}[];
	/**
	 * An array of customizable actions set up for the user. These allow the user to make certain roll operations as a single command.
	 */
	customActions?: any[];
	/**
	 * The general character data from the PathBuilder json export
	 */
	pathBuilderData?: null | {
		[k: string]: any;
	};
	/**
	 * The general character data from the Wanderer's guide API /character endpoint
	 */
	characterData?: {
		id?: number;
		userID?: number;
		buildID?: null | number;
		name?: string;
		level?: number;
		experience?: number;
		currentHealth?: null | number;
		tempHealth?: null | number;
		heroPoints?: null | number;
		ancestryID?: null | number;
		heritageID?: null | number;
		uniHeritageID?: null | number;
		backgroundID?: null | number;
		classID?: null | number;
		classID_2?: null | number;
		inventoryID?: number;
		notes?: any;
		rollHistoryJSON?: any;
		details?: any;
		customCode?: any;
		infoJSON?: null | {
			imageURL?: string;
			pronouns?: any;
			[k: string]: any;
		};
		dataID?: null | number;
		currentStamina?: null | number;
		currentResolve?: null | number;
		builderByLevel?: number;
		optionAutoDetectPreReqs?: number;
		optionAutoHeightenSpells?: number;
		optionPublicCharacter?: number;
		optionCustomCodeBlock?: number;
		optionDiceRoller?: number;
		optionClassArchetypes?: number;
		optionIgnoreBulk?: number;
		variantProfWithoutLevel?: number;
		variantFreeArchetype?: number;
		variantAncestryParagon?: number;
		variantStamina?: number;
		variantAutoBonusProgression?: number;
		variantGradualAbilityBoosts?: number;
		enabledSources?: any;
		enabledHomebrew?: any;
		createdAt?: string;
		updatedAt?: string;
		[k: string]: any;
	};
	/**
	 * The computed base stat block from the Wanderer's guide API /character/calculated-stats endpoint
	 */
	calculatedStats?: {
		charID?: number;
		maxHP?: number | null;
		totalClassDC?: number | null;
		totalSpeed?: number | null;
		totalAC?: number | null;
		totalPerception?: number | null;
		totalSkills?: {
			Name?: string;
			Bonus?: string | number | null;
			[k: string]: any;
		}[];
		totalSaves?: {
			Name?: string;
			Bonus?: string | number | null;
			[k: string]: any;
		}[];
		totalAbilityScores?: {
			Name?: string;
			Score?: number | null;
			[k: string]: any;
		}[];
		weapons?: {
			Name?: string;
			Bonus?: string | number | null;
			Damage?: string | number | null;
			[k: string]: any;
		}[];
		createdAt?: string;
		updatedAt?: string;
		[k: string]: any;
	};
	/**
	 * whether this is the active character for the user's character based commands
	 */
	isActiveCharacter?: boolean;
	/**
	 * When the character was first imported
	 */
	createdAt?: string;
	/**
	 * When the character was last updated
	 */
	lastUpdatedAt?: string;
	[k: string]: any;
}
